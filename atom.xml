<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ChenYinjie&#39;sBlog</title>
  
  <subtitle>share all I have</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ghostychen.github.io/"/>
  <updated>2020-05-19T17:17:43.321Z</updated>
  <id>https://ghostychen.github.io/</id>
  
  <author>
    <name>Chen Yinjie</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>阮一峰js教程读书笔记2</title>
    <link href="https://ghostychen.github.io/2020/05/20/20200520-02/"/>
    <id>https://ghostychen.github.io/2020/05/20/20200520-02/</id>
    <published>2020-05-19T17:13:46.000Z</published>
    <updated>2020-05-19T17:17:43.321Z</updated>
    
    <content type="html"><![CDATA[<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><ul><li>定义：对象就是一组“键值对”（key-value）的集合，是一种无序的复合数据集合。</li><li>如果键名不符合标识名的条件（比如第一个字符为数字，或者含有空格或运算符），且也不是数字，则必须加上引号，否则会报错。</li><li>对象的每一个键名又称为“属性”（property），它的“键值”可以是任何数据类型。如果一个属性的值为函数，通常把这个属性称为“方法”，可以像函数一样调用。</li><li>如果属性的值还是一个对象，就形成了链式引用。</li></ul><h3 id="对象中属性的操作"><a href="#对象中属性的操作" class="headerlink" title="对象中属性的操作"></a>对象中属性的操作</h3><ul><li><p>读取属性</p><p>一种是使用点运算符，还有一种是使用方括号运算符。</p><p><strong>如果使用方括号运算符，键名必须放在引号里面，否则会被当作变量处理。同时，方括号运算符内部还可以使用表达式。数字键可以不加引号，因为会自动转成字符串</strong></p><p>数值键名不能使用点运算符（因为会被当成小数点），只能使用方括号运算符。</p></li><li><p>属性赋值</p></li><li><p>查看所有属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var obj &#x3D; &#123;</span><br><span class="line">  key1: 1,</span><br><span class="line">  key2: 2</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Object.keys(obj);</span><br><span class="line">&#x2F;&#x2F; [&#39;key1&#39;, &#39;key2&#39;]</span><br></pre></td></tr></table></figure></li><li><p>delete命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var obj &#x3D; &#123; p: 1 &#125;;</span><br><span class="line">Object.keys(obj) &#x2F;&#x2F; [&quot;p&quot;]</span><br><span class="line"></span><br><span class="line">delete obj.p &#x2F;&#x2F; true</span><br><span class="line">obj.p &#x2F;&#x2F; undefined</span><br><span class="line">Object.keys(obj) &#x2F;&#x2F; []</span><br></pre></td></tr></table></figure><p>删除一个不存在的属性，<code>delete</code>不报错，而且返回<code>true</code>。</p><p>只有一种情况，<code>delete</code>命令会返回<code>false</code>，那就是该属性存在，且不得删除。</p><p><code>delete</code>命令只能删除对象本身的属性，无法删除继承的属性。</p></li><li><p>in 运算符</p><p><code>in</code>运算符用于检查对象是否包含某个属性（注意，检查的是键名，不是键值），如果包含就返回<code>true</code>，否则返回<code>false</code>。</p></li><li><p>for…in循环</p><p><code>for...in</code>循环用来遍历一个对象的全部属性。</p><p>它遍历的是对象所有可遍历（enumerable）的属性，会跳过不可遍历的属性。</p><p>它不仅遍历对象自身的属性，还遍历继承的属性。</p></li></ul><h2 id="with语句"><a href="#with语句" class="headerlink" title="with语句"></a>with语句</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">with (对象) &#123;</span><br><span class="line">  语句;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 操作同一个对象的多个属性时，提供一些书写的方便</span><br><span class="line">&#x2F;&#x2F; 例一</span><br><span class="line">var obj &#x3D; &#123;</span><br><span class="line">  p1: 1,</span><br><span class="line">  p2: 2,</span><br><span class="line">&#125;;</span><br><span class="line">with (obj) &#123;</span><br><span class="line">  p1 &#x3D; 4;</span><br><span class="line">  p2 &#x3D; 5;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 等同于</span><br><span class="line">obj.p1 &#x3D; 4;</span><br><span class="line">obj.p2 &#x3D; 5;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 例二</span><br><span class="line">with (document.links[0])&#123;</span><br><span class="line">  console.log(href);</span><br><span class="line">  console.log(title);</span><br><span class="line">  console.log(style);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 等同于</span><br><span class="line">console.log(document.links[0].href);</span><br><span class="line">console.log(document.links[0].title);</span><br><span class="line">console.log(document.links[0].style);</span><br></pre></td></tr></table></figure><p>如果<code>with</code>区块内部有变量的赋值操作，必须是当前对象已经存在的属性，否则会创造一个当前作用域的全局变量，<strong>会污染全局作用域。</strong>所以不建议使用with语句，可以用一个临时变量代替with。</p><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="1-加法运算符"><a href="#1-加法运算符" class="headerlink" title="1.加法运算符"></a>1.加法运算符</h3><ul><li>加法运算符存在重载，会执行相加或连接，由运算时决定。</li><li>其他运算符不会发送重载，所有运算子都转化为数值，再进行相应的数学运算。</li></ul><h3 id="2-算数运算符"><a href="#2-算数运算符" class="headerlink" title="2.算数运算符"></a>2.算数运算符</h3><ul><li>余数运算符（运算结果的正负号由第一个运算子的正负号决定）</li><li>自增自减运算符</li><li>数值运算符，负数值运算符   <em>数值运算符的作用在于可以将任何值转为数值（与<code>Number</code>函数的作用相同）</em></li><li>指数运算符（**）</li></ul><h3 id="3-赋值运算符"><a href="#3-赋值运算符" class="headerlink" title="3.赋值运算符"></a>3.赋值运算符</h3><h3 id="4-比较运算符"><a href="#4-比较运算符" class="headerlink" title="4.比较运算符"></a>4.比较运算符</h3><p>相等比较和非相等比较。两者的规则是不一样的，对于非相等的比较，算法是先看两个运算子是否都是字符串，如果是的，就按照字典顺序比较（实际上是比较 Unicode 码点）；否则，将两个运算子都转成数值，再比较数值的大小。</p><p>特殊情况，即任何值（包括<code>NaN</code>本身）与<code>NaN</code>比较，返回的都是<code>false</code>。</p><p>如果运算子是对象，会转为原始类型的值，再进行比较。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var x &#x3D; [2];</span><br><span class="line">x &gt; &#39;11&#39; &#x2F;&#x2F; true</span><br><span class="line">&#x2F;&#x2F; 等同于 [2].valueOf().toString() &gt; &#39;11&#39;</span><br><span class="line">&#x2F;&#x2F; 即 &#39;2&#39; &gt; &#39;11&#39;</span><br><span class="line"></span><br><span class="line">[2] &gt; [11] &#x2F;&#x2F; true</span><br><span class="line">&#x2F;&#x2F; 等同于 [2].valueOf().toString() &gt; [11].valueOf().toString()</span><br><span class="line">&#x2F;&#x2F; 即 &#39;2&#39; &gt; &#39;11&#39;</span><br></pre></td></tr></table></figure><ul><li><h4 id="严格相等运算符"><a href="#严格相等运算符" class="headerlink" title="严格相等运算符"></a>严格相等运算符</h4><p>正<code>0</code>等于负<code>0</code>。</p><p>两个复合类型（对象、数组、函数）的数据比较时，不是比较它们的值是否相等，而是比较它们是否指向同一个地址。</p></li><li><h4 id="相等运算符"><a href="#相等运算符" class="headerlink" title="相等运算符"></a>相等运算符</h4><p>原始类型的数据会转换成数值类型再进行比较。</p><p>对象（这里指广义的对象，包括数组和函数）与原始类型的值比较时，对象转化成原始类型的值，再进行比较。</p><p><code>undefined</code>和<code>null</code>与其他类型的值比较时，结果都为<code>false</code>，它们互相比较时结果为<code>true</code>。</p></li></ul><h3 id="5-布尔运算符"><a href="#5-布尔运算符" class="headerlink" title="5.布尔运算符"></a>5.布尔运算符</h3><ul><li><p>取反运算符：<code>!</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">!undefined &#x2F;&#x2F; true</span><br><span class="line">!null &#x2F;&#x2F; true</span><br><span class="line">!0 &#x2F;&#x2F; true</span><br><span class="line">!NaN &#x2F;&#x2F; true</span><br><span class="line">!&quot;&quot; &#x2F;&#x2F; true</span><br><span class="line">&#x2F;&#x2F;其他值都为false</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>且运算符：<code>&amp;&amp;</code></p><p>如果第一个运算子的布尔值为<code>true</code>，则返回第二个运算子的值（注意是值，不是布尔值）；如果第一个运算子的布尔值为<code>false</code>，则直接返回第一个运算子的值，且不再对第二个运算子求值。</p></li><li><p>或运算符：<code>||</code></p><p>如果第一个运算子的布尔值为<code>true</code>，则返回第一个运算子的值，且不再对第二个运算子求值；如果第一个运算子的布尔值为<code>false</code>，则返回第二个运算子的值。</p></li><li><p>三元运算符：<code>?:</code></p></li></ul><h3 id="6-位运算符"><a href="#6-位运算符" class="headerlink" title="6.位运算符"></a>6.位运算符</h3><p>位运算符只对整数起作用，如果一个运算子不是整数，会自动转为整数后再执行。另外，虽然在 JavaScript 内部，数值都是以64位浮点数的形式储存，但是做位运算的时候，是以32位带符号的整数进行运算的，并且返回值也是一个32位带符号的整数。用于取整。</p><p><strong>一个数与自身的取反值相加，等于-1。</strong></p><p>使用二进制否运算取整，是所有取整方法中最快的一种。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">~~2.9 &#x2F;&#x2F; 2</span><br><span class="line">~~47.11 &#x2F;&#x2F; 47</span><br><span class="line">~~1.9999 &#x2F;&#x2F; 1</span><br><span class="line">~~3 &#x2F;&#x2F; 3</span><br></pre></td></tr></table></figure><p>“异或运算”有一个特殊运用，连续对两个数<code>a</code>和<code>b</code>进行三次异或运算，<code>a^=b; b^=a; a^=b;</code>，可以互换它们的值。这意味着，使用“异或运算”可以在不引入临时变量的前提下，互换两个变量的值。这是互换两个变量的值的最快方法。                 异或运算也可以用来取整。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; RGB to HEX</span><br><span class="line">&#x2F;&#x2F; (1 &lt;&lt; 24)的作用为保证结果是6位数</span><br><span class="line">var rgb2hex &#x3D; function(r, g, b) &#123;</span><br><span class="line">  return &#39;#&#39; + ((1 &lt;&lt; 24) + (r &lt;&lt; 16) + (g &lt;&lt; 8) + b)</span><br><span class="line">    .toString(16) &#x2F;&#x2F; 先转成十六进制，然后返回字符串</span><br><span class="line">    .substr(1);   &#x2F;&#x2F; 去除字符串的最高位，返回后面六个字符串</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>带符号位的右移运算符（<code>&gt;&gt;&gt;</code>）表示将一个数的二进制形式向右移动，包括符号位也参与移动，头部补<code>0</code>。所以，该运算总是得到正值。</p><h3 id="7-其他运算符"><a href="#7-其他运算符" class="headerlink" title="7.其他运算符"></a>7.其他运算符</h3><ul><li><p><code>void</code>运算符的作用是执行一个表达式，然后不返回任何值，或者说返回<code>undefined</code>。</p><p>主要用途是浏览器的书签工具（bookmarklet），以及在超级链接中插入代码防止网页跳转。</p></li><li><p>逗号运算符用于对两个表达式求值，并返回<strong>后</strong>一个表达式的值。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;对象&quot;&gt;&lt;a href=&quot;#对象&quot; class=&quot;headerlink&quot; title=&quot;对象&quot;&gt;&lt;/a&gt;对象&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;定义：对象就是一组“键值对”（key-value）的集合，是一种无序的复合数据集合。&lt;/li&gt;
&lt;li&gt;如果键名不符合标识名的条
      
    
    </summary>
    
    
      <category term="Js读书笔记" scheme="https://ghostychen.github.io/categories/Js%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Javascript" scheme="https://ghostychen.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>阮一峰js教程读书笔记1</title>
    <link href="https://ghostychen.github.io/2020/05/20/20200520-01/"/>
    <id>https://ghostychen.github.io/2020/05/20/20200520-01/</id>
    <published>2020-05-19T17:13:15.000Z</published>
    <updated>2020-05-19T17:17:04.507Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JavaScript-与-ECMAScript的关系"><a href="#JavaScript-与-ECMAScript的关系" class="headerlink" title="JavaScript 与 ECMAScript的关系"></a>JavaScript 与 ECMAScript的关系</h2><p>ECMAScript 和 JavaScript 的关系是，前者是后者的规格，后者是前者的一种实现。</p><h2 id="大事记"><a href="#大事记" class="headerlink" title="大事记"></a>大事记</h2><p>1999年，IE 5部署了 XMLHttpRequest 接口，允许 JavaScript 发出 HTTP 请求，为后来大行其道的 Ajax 应用创造了条件。</p><p>2001年，Douglas Crockford 提出了 JSON 格式，用于取代 XML 格式，进行服务器和网页之间的数据交换。JavaScript 可以原生支持这种格式，不需要额外部署代码。</p><h2 id="语法注意点"><a href="#语法注意点" class="headerlink" title="语法注意点"></a>语法注意点</h2><ul><li><p>如果使用<code>var</code>重新声明一个已经存在的变量，是无效的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> x;</span><br><span class="line">x <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></li><li><p>变量提升</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//undefined</span></span><br><span class="line"></span><br><span class="line">等同于</span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// undefined</span></span><br><span class="line">a = <span class="number">1</span>;</span><br></pre></td></tr></table></figure></li><li><p>不合法的标识符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>a  <span class="comment">// 第一个字符不能是数字</span></span><br><span class="line"><span class="number">23</span>  <span class="comment">// 同上</span></span><br><span class="line">***  <span class="comment">// 标识符不能包含星号</span></span><br><span class="line">a+b  <span class="comment">// 标识符不能包含加号</span></span><br><span class="line">-d  <span class="comment">// 标识符不能包含减号或连词线</span></span><br></pre></td></tr></table></figure></li><li><p><code>switch</code>语句后面的表达式，与<code>case</code>语句后面的表示式比较运行结果时，采用的是严格相等运算符（<code>===</code>），而不是相等运算符（<code>==</code>），这意味着比较时不会发生类型转换</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (x) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="literal">true</span>:</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'x 发生类型转换'</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'x 没有发生类型转换'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// x 没有发生类型转换</span></span><br></pre></td></tr></table></figure></li><li><p>不管条件是否为真，<code>do...while</code>循环至少运行一次，这是这种结构最大的特点</p></li></ul><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ul><li><p><strong>数值（number）：整数和小数（比如<code>1</code>和<code>3.14</code>）</strong></p></li><li><p><strong>字符串（string）：文本（比如<code>Hello World</code>）。</strong></p></li><li><p><strong>布尔值（boolean）：表示真伪的两个特殊值，即<code>true</code>（真）和<code>false</code>（假）</strong></p></li><li><p><strong><code>undefined</code>：表示“未定义”或不存在，即由于目前没有定义，所以此处暂时没有任何值。</strong></p></li><li><p><strong><code>null</code>：表示空值，即此处的值为空。</strong></p></li><li><p><strong>对象（object）：各种值组成的集合。</strong></p><ul><li>狭义的对象（object）</li><li>数组（array）</li><li>函数（function）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//typeof 检测值的类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> <span class="number">123</span> <span class="comment">// "number"</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="string">'123'</span> <span class="comment">// "string"</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">false</span> <span class="comment">// "boolean"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">typeof</span> f</span><br><span class="line"><span class="comment">// "function"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">undefined</span></span><br><span class="line"><span class="comment">// "undefined"</span></span><br><span class="line"></span><br><span class="line">v</span><br><span class="line"><span class="comment">// ReferenceError: v is not defined</span></span><br><span class="line"><span class="keyword">typeof</span> v</span><br><span class="line"><span class="comment">// "undefined"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> <span class="built_in">window</span> <span class="comment">// "object"</span></span><br><span class="line"><span class="keyword">typeof</span> &#123;&#125; <span class="comment">// "object"</span></span><br><span class="line"><span class="keyword">typeof</span> [] <span class="comment">// "object"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span> <span class="comment">// "object"</span></span><br></pre></td></tr></table></figure></li></ul><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>(<span class="literal">null</span>) <span class="comment">// 0</span></span><br><span class="line"><span class="number">5</span> + <span class="literal">null</span> <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">undefined</span>) <span class="comment">// NaN</span></span><br><span class="line"><span class="number">5</span> + <span class="literal">undefined</span> <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure></code></pre><ul><li><p><code>null</code>表示空值，即该处的值现在为空。调用函数时，某个参数未设置任何值，这时就可以传入<code>null</code>，表示该参数为空。</p></li><li><p><code>undefined</code>表示“未定义”。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 变量声明了，但没有赋值</span></span><br><span class="line"><span class="keyword">var</span> i;</span><br><span class="line">i <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用函数时，应该提供的参数没有提供，该参数等于 undefined</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line">f() <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象没有赋值的属性</span></span><br><span class="line"><span class="keyword">var</span>  o = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">o.p <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数没有返回值时，默认返回 undefined</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">f() <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>布尔值转换规则</p><ul><li><code>undefined</code></li><li><code>null</code></li><li><code>false</code></li><li><code>0</code></li><li><code>NaN</code></li><li><code>&quot;&quot;</code>或<code>&#39;&#39;</code>（空字符串）</li></ul></li></ul><h3 id="数值"><a href="#数值" class="headerlink" title="数值"></a>数值</h3><ul><li><p>所有数字都是64位浮点数形式存储</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> === <span class="number">1.0</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li><p>JavaScript 语言的底层根本没有整数，所有数字都是小数（64位浮点数）。容易造成混淆的是，某些运算只有整数才能完成，此时 JavaScript 会自动把64位浮点数，转成32位整数，然后再进行运算。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0.1</span> + <span class="number">0.2</span> === <span class="number">0.3</span></span><br><span class="line"><span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="number">0.3</span> / <span class="number">0.1</span></span><br><span class="line"><span class="comment">// 2.9999999999999996</span></span><br><span class="line"></span><br><span class="line">(<span class="number">0.3</span> - <span class="number">0.2</span>) === (<span class="number">0.2</span> - <span class="number">0.1</span>)</span><br><span class="line"><span class="comment">// false</span></span><br></pre></td></tr></table></figure></li><li><p>数值精度(浮点数的64个二进制位)</p><ul><li>第1位：符号位，<code>0</code>表示正数，<code>1</code>表示负数</li><li>第2位到第12位（共11位）：指数部分</li><li>第13位到第64位（共52位）：小数部分（即有效数字）</li></ul></li></ul><p>  简单的法则就是，JavaScript 对15位的十进制数都可以精确处理<br>  NaN不是独立的数据类型，数据类型依然是Number。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">NaN &#x3D;&#x3D;&#x3D; NaN &#x2F;&#x2F;false </span><br><span class="line">[NaN].indexof(NaN) &#x2F;&#x2F;-1</span><br><span class="line">Boolean(NaN) &#x2F;&#x2F; false</span><br><span class="line"></span><br><span class="line">NaN + 32 &#x2F;&#x2F; NaN</span><br><span class="line">NaN - 32 &#x2F;&#x2F; NaN</span><br><span class="line">NaN * 32 &#x2F;&#x2F; NaN</span><br><span class="line">NaN &#x2F; 32 &#x2F;&#x2F; NaN</span><br></pre></td></tr></table></figure><h3 id="Infinity"><a href="#Infinity" class="headerlink" title="Infinity"></a>Infinity</h3><p>  <code>Infinity</code>表示“无穷”，用来表示两种场景。一种是一个正的数值太大，或一个负的数值太小，无法表示；另一种是非0数值除以0，得到<code>Infinity</code>。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">Math.pow(2,1024) &#x2F;&#x2F;Infinity</span><br><span class="line"></span><br><span class="line">0 &#x2F; 0 &#x2F;&#x2F;NaN</span><br><span class="line">1 &#x2F; 0 &#x2F;&#x2F;Infinity</span><br><span class="line"></span><br><span class="line">Infinity &#x3D;&#x3D;&#x3D; -Infinity &#x2F;&#x2F;false</span><br><span class="line"></span><br><span class="line">1 &#x2F; -0 &#x2F;&#x2F;-Infinity</span><br><span class="line">-1 &#x2F; -0 &#x2F;&#x2F;Infinity</span><br><span class="line"></span><br><span class="line">Infinity &gt; 1000 &#x2F;&#x2F;true</span><br><span class="line">-Infinity &lt; -1000 &#x2F;&#x2F;true</span><br><span class="line"></span><br><span class="line">Infinity &gt; NaN &#x2F;&#x2F; false</span><br><span class="line">-Infinity &gt; NaN &#x2F;&#x2F; false</span><br><span class="line">Infinity &lt; NaN &#x2F;&#x2F; false</span><br><span class="line">-Infinity &lt; NaN &#x2F;&#x2F; false</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Infinity的四则运算，符合无穷的数学计算规则。</span><br><span class="line">5 * Infinity &#x2F;&#x2F; Infinity</span><br><span class="line">5 - Infinity &#x2F;&#x2F; -Infinity</span><br><span class="line">Infinity &#x2F; 5 &#x2F;&#x2F; Infinity</span><br><span class="line">5 &#x2F; Infinity &#x2F;&#x2F; 0</span><br><span class="line"></span><br><span class="line">0 * Infinity &#x2F;&#x2F; NaN</span><br><span class="line">0 &#x2F; Infinity &#x2F;&#x2F; 0</span><br><span class="line">Infinity &#x2F; 0 &#x2F;&#x2F; Infinity</span><br><span class="line"></span><br><span class="line">Infinity + Infinity &#x2F;&#x2F; Infinity</span><br><span class="line">Infinity * Infinity &#x2F;&#x2F; Infinity</span><br><span class="line"></span><br><span class="line">Infinity - Infinity &#x2F;&#x2F; NaN</span><br><span class="line">Infinity &#x2F; Infinity &#x2F;&#x2F; NaN</span><br><span class="line">Infinity与null计算时，null会转成0，等同于与0的计算。</span><br><span class="line">null * Infinity &#x2F;&#x2F; NaN</span><br><span class="line">null &#x2F; Infinity &#x2F;&#x2F; 0</span><br><span class="line">Infinity &#x2F; null &#x2F;&#x2F; Infinity</span><br><span class="line"></span><br><span class="line">Infinity与undefined计算，返回的都是NaN。</span><br><span class="line">undefined + Infinity &#x2F;&#x2F; NaN</span><br><span class="line">undefined - Infinity &#x2F;&#x2F; NaN</span><br><span class="line">undefined * Infinity &#x2F;&#x2F; NaN</span><br><span class="line">undefined &#x2F; Infinity &#x2F;&#x2F; NaN</span><br><span class="line">Infinity &#x2F; undefined &#x2F;&#x2F; NaN</span><br></pre></td></tr></table></figure><h2 id="与数值相关的全局方法"><a href="#与数值相关的全局方法" class="headerlink" title="与数值相关的全局方法"></a>与数值相关的全局方法</h2><ul><li><h3 id="parseInt"><a href="#parseInt" class="headerlink" title="parseInt()"></a>parseInt()</h3><p>如果字符串的第一个字符不能转化为数字（后面跟着数字的正负号除外），返回<code>NaN</code>。</p><p>对于那些会自动转为科学计数法的数字，<code>parseInt</code>会将科学计数法的表示方法视为字符串。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">parseInt(1000000000000000000000.5) &#x2F;&#x2F; 1</span><br><span class="line">&#x2F;&#x2F; 等同于</span><br><span class="line">parseInt(&#39;1e+21&#39;) &#x2F;&#x2F; 1</span><br><span class="line"></span><br><span class="line">parseInt(0.0000008) &#x2F;&#x2F; 8</span><br><span class="line">&#x2F;&#x2F; 等同于</span><br><span class="line">parseInt(&#39;8e-7&#39;) &#x2F;&#x2F; 8</span><br></pre></td></tr></table></figure></li><li><h3 id="parseFloat"><a href="#parseFloat" class="headerlink" title="parseFloat()"></a>parseFloat()</h3><p>字符串符合科学计数法，则会进行相应的转换。</p><p><code>parseFloat</code>会将空字符串转为<code>NaN</code>。</p></li><li><h3 id="isNaN"><a href="#isNaN" class="headerlink" title="isNaN()"></a>isNaN()</h3><p><code>isNaN</code>只对数值有效，如果传入其他值，会被先转成数值。</p><p>对于空数组和只有一个数值成员的数组，<code>isNaN</code>返回<code>false</code>,原因是这些数组能被<code>Number</code>函数转成数值。</p></li><li><h3 id="isFinite"><a href="#isFinite" class="headerlink" title="isFinite()"></a>isFinite()</h3><p><code>isFinite</code>方法返回一个布尔值，表示某个值是否为正常的数值。</p><p>除了<code>Infinity</code>、<code>-Infinity</code>、<code>NaN</code>和<code>undefined</code>这几个值会返回<code>false</code>，<code>isFinite</code>对于其他的数值都会返回<code>true</code>。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;JavaScript-与-ECMAScript的关系&quot;&gt;&lt;a href=&quot;#JavaScript-与-ECMAScript的关系&quot; class=&quot;headerlink&quot; title=&quot;JavaScript 与 ECMAScript的关系&quot;&gt;&lt;/a&gt;JavaScri
      
    
    </summary>
    
    
      <category term="Js读书笔记" scheme="https://ghostychen.github.io/categories/Js%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Javascript" scheme="https://ghostychen.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>Git常用命令速查表</title>
    <link href="https://ghostychen.github.io/2020/05/19/art2020051902/"/>
    <id>https://ghostychen.github.io/2020/05/19/art2020051902/</id>
    <published>2020-05-19T12:38:14.000Z</published>
    <updated>2020-05-19T12:39:37.285Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git常用命令速查表"><a href="#Git常用命令速查表" class="headerlink" title="Git常用命令速查表"></a>Git常用命令速查表</h1><h2 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git clone &lt;url&gt;        #克隆远程版本库</span><br><span class="line">$ git init               #初始化本地版本库</span><br></pre></td></tr></table></figure><h2 id="修改和提交"><a href="#修改和提交" class="headerlink" title="修改和提交"></a>修改和提交</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git status              #查看状态</span><br><span class="line">$ git diff                #查看变更内容</span><br><span class="line">$ git add .               #跟踪所有改动过的文件</span><br><span class="line">$ git add &lt;file&gt;          #跟踪指定的文件</span><br><span class="line">$ git mv &lt;old&gt; &lt;new&gt;      #文件改名</span><br><span class="line">$ git rm &lt;file&gt;           #删除文件</span><br><span class="line">$ git rm --cached &lt;file&gt;              #停止跟踪文件但不删除</span><br><span class="line">$ git commit -m &quot;commit message&quot;      #提交所有更新过的文件</span><br><span class="line">$ git commit --amend                  #修改最后一次提交</span><br></pre></td></tr></table></figure><h2 id="查看提交历史"><a href="#查看提交历史" class="headerlink" title="查看提交历史"></a>查看提交历史</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git log               #查看提交历史         </span><br><span class="line">$ git log -p &lt;file&gt;     #查看指定文件的提交历史</span><br><span class="line">$ git blame &lt;file&gt;      #以列表方式查看指定文件的提交历史</span><br></pre></td></tr></table></figure><h2 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --head HEAD         #撤销工作目录中所有未提交文件的修改内容</span><br><span class="line">$ git checkout HEAD &lt;file&gt;      #撤销指定的未提交文件的修改内容</span><br><span class="line">$ git revert &lt;commit&gt;           #撤销指定的提交</span><br></pre></td></tr></table></figure><h2 id="分支与标签"><a href="#分支与标签" class="headerlink" title="分支与标签"></a>分支与标签</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git branch                     #显示所有的本地分支</span><br><span class="line">$ git checkout &lt;branch&#x2F;tag&gt;      #切换到指定分支或标签</span><br><span class="line">$ git branch &lt;new-branch&gt;        #创建新分支</span><br><span class="line">$ git branch -d &lt;branch&gt;         #删除本地分支</span><br><span class="line">$ git tag                        #列出所有本地标签</span><br><span class="line">$ git tag &lt;tagname&gt;              #基于最新提交创建标签</span><br><span class="line">$ git tag -d &lt;tagname&gt;           #删除标签</span><br></pre></td></tr></table></figure><h2 id="合并与衍合"><a href="#合并与衍合" class="headerlink" title="合并与衍合"></a>合并与衍合</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git merge &lt;branch&gt;         #合并指定分支到当前分支</span><br><span class="line">$ git rebase &lt;branch&gt;        #衍合指定分支到当前分支</span><br></pre></td></tr></table></figure><h2 id="远程操作"><a href="#远程操作" class="headerlink" title="远程操作"></a>远程操作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git remote -v                             #查看远程版本库信息</span><br><span class="line">$ git remote show &lt;remote&gt;                  #查看指定远程版本库信息</span><br><span class="line">$ git remote add &lt;remote&gt; &lt;url&gt;             #添加远程版本库</span><br><span class="line">$ git fetch &lt;remote&gt;                        #从远程版本库获取代码</span><br><span class="line">$ git pull &lt;remote&gt; &lt;branch&gt;                #下载代码及快速合并</span><br><span class="line">$ git push &lt;remote&gt; &lt;branch&gt;                #上传代码及快速合并</span><br><span class="line">$ git push &lt;remote&gt; :&lt;branch&#x2F;tag-name&gt;      #删除远程分支或标签</span><br><span class="line">$ git push --tags                           #上传所有标签</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Git常用命令速查表&quot;&gt;&lt;a href=&quot;#Git常用命令速查表&quot; class=&quot;headerlink&quot; title=&quot;Git常用命令速查表&quot;&gt;&lt;/a&gt;Git常用命令速查表&lt;/h1&gt;&lt;h2 id=&quot;创建版本库&quot;&gt;&lt;a href=&quot;#创建版本库&quot; class=&quot;he
      
    
    </summary>
    
    
      <category term="前端学习" scheme="https://ghostychen.github.io/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="git" scheme="https://ghostychen.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>前端跨域解决方案</title>
    <link href="https://ghostychen.github.io/2020/05/19/art20200519/"/>
    <id>https://ghostychen.github.io/2020/05/19/art20200519/</id>
    <published>2020-05-19T12:32:16.000Z</published>
    <updated>2020-05-19T12:36:36.052Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前端跨域解决方案"><a href="#前端跨域解决方案" class="headerlink" title="前端跨域解决方案"></a>前端跨域解决方案</h1><ol><li><h2 id="什么是前端跨域"><a href="#什么是前端跨域" class="headerlink" title="什么是前端跨域"></a>什么是前端跨域</h2><ul><li><p>跨域是浏览器为了安全做出的限制策略</p></li><li><p>浏览器请求必须遵守同源策略：同域名，同端口，同协议</p></li></ul></li><li><h2 id="怎么解决前端跨域"><a href="#怎么解决前端跨域" class="headerlink" title="怎么解决前端跨域"></a>怎么解决前端跨域</h2><ul><li><h3 id="CORS跨域"><a href="#CORS跨域" class="headerlink" title="CORS跨域"></a>CORS跨域</h3><p>CORS跨域 - 服务端设置，前端直接调用</p><p>说明：后台允许前端某个站点进行访问</p><p>网站Easy Mock</p></li><li><h3 id="JSONP跨域"><a href="#JSONP跨域" class="headerlink" title="JSONP跨域"></a>JSONP跨域</h3><p>JSONP跨域 - 前端适配，后台配合</p><p>说明：前后台同时改造</p><p>注意：JSONP请求不是真正的请求，在XHR中没有，只是一段JS脚本</p><p>JSONP语法 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let url &#x3D; &quot;https:&#x2F;&#x2F;www.imooc.com&#x2F;common&#x2F;adver-getadver&quot;</span><br><span class="line">    jsonp(url,&#123;&#125;，(err,res)&#x3D;&gt;&#123;</span><br><span class="line">      let result &#x3D; res;</span><br><span class="line">      this.data &#x3D; result;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure></li></ul></li></ol><ul><li><h3 id="代理跨域"><a href="#代理跨域" class="headerlink" title="代理跨域"></a>代理跨域</h3><p>接口代理 - 通过修改nginx服务器配置来实现</p><p>说明：前端修改，后台不动</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前端跨域解决方案&quot;&gt;&lt;a href=&quot;#前端跨域解决方案&quot; class=&quot;headerlink&quot; title=&quot;前端跨域解决方案&quot;&gt;&lt;/a&gt;前端跨域解决方案&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;h2 id=&quot;什么是前端跨域&quot;&gt;&lt;a href=&quot;#什么是前端跨域&quot; clas
      
    
    </summary>
    
    
      <category term="前端学习" scheme="https://ghostychen.github.io/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="跨域" scheme="https://ghostychen.github.io/tags/%E8%B7%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://ghostychen.github.io/2020/05/12/hello-world/"/>
    <id>https://ghostychen.github.io/2020/05/12/hello-world/</id>
    <published>2020-05-12T00:26:36.605Z</published>
    <updated>2020-05-12T00:26:36.605Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Vue项目文件目录结构</title>
    <link href="https://ghostychen.github.io/2020/05/11/article/"/>
    <id>https://ghostychen.github.io/2020/05/11/article/</id>
    <published>2020-05-11T02:37:00.000Z</published>
    <updated>2020-05-12T00:26:36.600Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Node环境安装"><a href="#Node环境安装" class="headerlink" title="Node环境安装"></a>Node环境安装</h2><h3 id="window-mac安装"><a href="#window-mac安装" class="headerlink" title="window/mac安装"></a>window/mac安装</h3><ul><li><a href="http://nodejs.cn/download" target="_blank" rel="noopener">http://nodejs.cn/download</a></li></ul><h2 id="Git安装和配置"><a href="#Git安装和配置" class="headerlink" title="Git安装和配置"></a>Git安装和配置</h2><ul><li><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li>官网：<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">https://git-scm.com/downloads</a></li></ul></li><li><h3 id="环境变量配置、开发工具配置"><a href="#环境变量配置、开发工具配置" class="headerlink" title="环境变量配置、开发工具配置"></a>环境变量配置、开发工具配置</h3><ul><li><p>查看设置本地环境变量</p><p>属性 –&gt; 高级 –&gt; 环境变量</p></li><li><p>配置VsCode的Git地址</p></li></ul></li><li><h3 id="存储密码-SSH添加公钥"><a href="#存储密码-SSH添加公钥" class="headerlink" title="存储密码 - SSH添加公钥"></a>存储密码 - SSH添加公钥</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git config --list</span><br><span class="line">git config --global user.name &#39;yourname&#39;</span><br><span class="line">git config --global user.email &#39;youremail@example.com&#39;</span><br><span class="line"></span><br><span class="line">git config --global credential.helper store</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;配置SSH密钥</span><br><span class="line">ssh-keygen -t rsa -C &#39;youremail@example.com&#39;</span><br></pre></td></tr></table></figure></li><li><h3 id="团队使用Git命令开发项目"><a href="#团队使用Git命令开发项目" class="headerlink" title="团队使用Git命令开发项目"></a>团队使用Git命令开发项目</h3></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Node环境安装&quot;&gt;&lt;a href=&quot;#Node环境安装&quot; class=&quot;headerlink&quot; title=&quot;Node环境安装&quot;&gt;&lt;/a&gt;Node环境安装&lt;/h2&gt;&lt;h3 id=&quot;window-mac安装&quot;&gt;&lt;a href=&quot;#window-mac安装&quot; cla
      
    
    </summary>
    
    
      <category term="Vue全家桶高仿小米商城" scheme="https://ghostychen.github.io/categories/Vue%E5%85%A8%E5%AE%B6%E6%A1%B6%E9%AB%98%E4%BB%BF%E5%B0%8F%E7%B1%B3%E5%95%86%E5%9F%8E/"/>
    
    
      <category term="Vue" scheme="https://ghostychen.github.io/tags/Vue/"/>
    
      <category term="Git" scheme="https://ghostychen.github.io/tags/Git/"/>
    
  </entry>
  
</feed>
